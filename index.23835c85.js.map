{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static get STATUS() {\n        return {\n            idle: \"idle\",\n            playing: \"playing\",\n            win: \"win\",\n            lose: \"lose\"\n        };\n    }\n    static get INITIAL_STATE() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    constructor(initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE){\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>row.slice());\n        this.score = 0;\n        this.moves = 0;\n        this.animation = {\n            newCell: []\n        };\n    }\n    moveLeft() {\n        const newGrid = this.move(\"left\");\n        if (newGrid) {\n            this.state = newGrid;\n            this.animation.newCell = this.getRandomCell();\n            if (!this.hasAvailableMoves(newGrid)) this.lose();\n        }\n    }\n    moveRight() {\n        const newGrid = this.move(\"right\");\n        if (newGrid) {\n            this.state = newGrid;\n            this.animation.newCell = this.getRandomCell();\n            if (!this.hasAvailableMoves(newGrid)) this.lose();\n        }\n    }\n    moveUp() {\n        const columns = this.getGridData();\n        const newColumns = this.move(\"up\", columns);\n        if (newColumns) {\n            this.state = this.getGridData(newColumns);\n            this.animation.newCell = this.getRandomCell();\n            if (!this.hasAvailableMoves(newColumns)) this.lose();\n        }\n    }\n    moveDown() {\n        const columns = this.getGridData();\n        const newColumns = this.move(\"down\", columns);\n        if (newColumns) {\n            this.state = this.getGridData(newColumns);\n            this.animation.newCell = this.getRandomCell();\n            if (!this.hasAvailableMoves(newColumns)) this.lose();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.getRandomCell();\n        this.getRandomCell();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.score = 0;\n        this.state = this.initialState.map((row)=>row.slice());\n    }\n    // Add your own methods here\n    lose() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n    win() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n    }\n    move(direction, grid = this.state) {\n        if (this.status !== \"playing\") return false;\n        const newGrid = [];\n        for(let i = 0; i < grid.length; i++){\n            let newRow = grid[i].filter((cell)=>cell);\n            if (newRow.length > 1) newRow = this.mergeCells(newRow, direction);\n            while(newRow.length < 4)if (direction === \"left\" || direction === \"up\") newRow.push(0);\n            else newRow.unshift(0);\n            newGrid.push(newRow);\n        }\n        return JSON.stringify(grid) !== JSON.stringify(newGrid) ? newGrid : false;\n    }\n    hasAvailableMoves(grid) {\n        for(let x = 0; x < grid.length; x++)for(let y = 0; y < grid[x].length; y++){\n            if (grid[x][y] === 0) return true;\n            if (x < grid.length - 1 && grid[x][y] === grid[x + 1][y]) return true;\n            if (y < grid[x].length - 1 && grid[x][y] === grid[x][y + 1]) return true;\n        }\n        return false;\n    }\n    getRandomCell() {\n        while(true){\n            const totalCells = this.state.length * this.state[0].length;\n            const randomIndex = Math.floor(Math.random() * totalCells);\n            const x = Math.floor(randomIndex / this.state[0].length);\n            const y = randomIndex % this.state[0].length;\n            const value = Math.random() > 0.1 ? 2 : 4;\n            if (this.isEmpty(this.state[x][y])) {\n                this.state[x][y] = value;\n                return [\n                    x,\n                    y,\n                    value\n                ];\n            }\n        }\n    }\n    getGridData(grid = this.state) {\n        const data = [];\n        for(let i = 0; i < grid.length; i++)data.push(grid.map((row)=>row[i]));\n        return data;\n    }\n    isEmpty(cell) {\n        return cell === 0;\n    }\n    mergeCells(row, direction) {\n        let currentRow = row;\n        const newRow = [];\n        let i = 0;\n        if (direction === \"right\" || direction === \"down\") currentRow = [\n            ...currentRow\n        ].reverse();\n        while(i < currentRow.length)if (currentRow[i] !== 0 && currentRow[i] === currentRow[i + 1]) {\n            const sum = currentRow[i] * 2;\n            this.score += sum;\n            newRow.push(sum);\n            if (sum === 2048) this.win();\n            i += 2;\n        } else {\n            newRow.push(currentRow[i]);\n            i++;\n        }\n        if (direction === \"right\" || direction === \"down\") return newRow.reverse();\n        return newRow;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$field = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldRows = $09e991522ca7e64e$var$field.rows;\nconst $09e991522ca7e64e$var$fieldCells = [\n    ...$09e991522ca7e64e$var$fieldRows\n].map((row)=>row.cells);\nfunction $09e991522ca7e64e$var$emptyField() {\n    for (const row of $09e991522ca7e64e$var$fieldCells)[\n        ...row\n    ].forEach((cell)=>{\n        if (cell.classList.length === 2) {\n            cell.classList.remove(cell.classList[1]);\n            cell.classList.remove(cell.classList[1]);\n            cell.textContent = \"\";\n        }\n    });\n}\nfunction $09e991522ca7e64e$var$updateCell(arr, add) {\n    const cell = $09e991522ca7e64e$var$fieldCells[arr[0]][arr[1]];\n    const classes = cell.classList;\n    const index = [\n        ...classes\n    ].findIndex((element)=>element.startsWith(\"field-cell--\"), 0);\n    if (index !== -1) cell.classList.remove(classes[index]);\n    if ([\n        ...classes\n    ].includes(\"new\")) cell.classList.remove(\"new\");\n    if (add) {\n        if ($09e991522ca7e64e$var$game.animation.newCell.length === 0 || arr.every((e, i)=>e === $09e991522ca7e64e$var$game.animation.newCell[i])) cell.classList.add(\"new\");\n        cell.classList.add(`field-cell--${arr[2]}`);\n        cell.textContent = `${arr[2]}`;\n    } else {\n        cell.classList.remove(classes[index]);\n        cell.textContent = \"\";\n    }\n}\nfunction $09e991522ca7e64e$var$move(grid) {\n    for(let x = 0; x < grid.length; x++)for(let y = 0; y < grid[x].length; y++){\n        $09e991522ca7e64e$var$updateCell([\n            x,\n            y,\n            grid[x][y]\n        ], grid[x][y] !== 0);\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n        $09e991522ca7e64e$var$checkStatus();\n    }\n}\nfunction $09e991522ca7e64e$var$checkStatus() {\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    if ([\n        ...e.target.classList\n    ].includes(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$score.textContent = 0;\n        $09e991522ca7e64e$var$emptyField();\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status === \"playing\") switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n    }\n});\n$09e991522ca7e64e$var$field.addEventListener(\"touchstart\", $09e991522ca7e64e$var$handleTouchStart, {\n    passive: true\n});\n$09e991522ca7e64e$var$field.addEventListener(\"touchmove\", $09e991522ca7e64e$var$handleTouchMove, {\n    passive: true\n});\n$09e991522ca7e64e$var$field.addEventListener(\"touchend\", $09e991522ca7e64e$var$handleTouchEnd, {\n    passive: true\n});\nlet $09e991522ca7e64e$var$touchStartX, $09e991522ca7e64e$var$touchStartY, $09e991522ca7e64e$var$swipeDirection;\nfunction $09e991522ca7e64e$var$handleTouchStart(e) {\n    $09e991522ca7e64e$var$touchStartX = e.touches[0].clientX;\n    $09e991522ca7e64e$var$touchStartY = e.touches[0].clientY;\n}\nfunction $09e991522ca7e64e$var$handleTouchMove(e) {\n    const currentX = e.touches[0].clientX;\n    const currentY = e.touches[0].clientY;\n    const swipeX = currentX - $09e991522ca7e64e$var$touchStartX;\n    const swipeY = currentY - $09e991522ca7e64e$var$touchStartY;\n    if (Math.abs(swipeX) > Math.abs(swipeY)) $09e991522ca7e64e$var$swipeDirection = swipeX > 0 ? \"right\" : \"left\";\n    else $09e991522ca7e64e$var$swipeDirection = swipeY > 0 ? \"down\" : \"up\";\n}\nfunction $09e991522ca7e64e$var$handleTouchEnd(e) {\n    if ($09e991522ca7e64e$var$game.status === \"playing\") switch($09e991522ca7e64e$var$swipeDirection){\n        case \"left\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"right\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"up\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n        case \"down\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$move($09e991522ca7e64e$var$game.state);\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.23835c85.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst button = document.querySelector('button');\nconst field = document.querySelector('.game-field');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nconst fieldRows = field.rows;\nconst fieldCells = [...fieldRows].map((row) => row.cells);\n\nfunction emptyField() {\n  for (const row of fieldCells) {\n    [...row].forEach((cell) => {\n      if (cell.classList.length === 2) {\n        cell.classList.remove(cell.classList[1]);\n        cell.classList.remove(cell.classList[1]);\n        cell.textContent = '';\n      }\n    });\n  }\n}\n\nfunction updateCell(arr, add) {\n  const cell = fieldCells[arr[0]][arr[1]];\n  const classes = cell.classList;\n  const index = [...classes].findIndex(\n    (element) => element.startsWith('field-cell--'),\n    0,\n  );\n\n  if (index !== -1) {\n    cell.classList.remove(classes[index]);\n  }\n\n  if ([...classes].includes('new')) {\n    cell.classList.remove('new');\n  }\n\n  if (add) {\n    if (\n      game.animation.newCell.length === 0\n      || arr.every((e, i) => e === game.animation.newCell[i])\n    ) {\n      cell.classList.add('new');\n    }\n\n    cell.classList.add(`field-cell--${arr[2]}`);\n    cell.textContent = `${arr[2]}`;\n  } else {\n    cell.classList.remove(classes[index]);\n    cell.textContent = '';\n  }\n}\n\nfunction move(grid) {\n  for (let x = 0; x < grid.length; x++) {\n    for (let y = 0; y < grid[x].length; y++) {\n      updateCell([x, y, grid[x][y]], grid[x][y] !== 0);\n      score.textContent = game.score;\n      checkStatus();\n    }\n  }\n}\n\nfunction checkStatus() {\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nbutton.addEventListener('click', (e) => {\n  if ([...e.target.classList].includes('start')) {\n    game.start();\n    move(game.state);\n\n    messageStart.classList.add('hidden');\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    game.restart();\n    score.textContent = 0;\n    emptyField();\n\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === 'playing') {\n    switch (e.code) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        move(game.state);\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        move(game.state);\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        move(game.state);\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        move(game.state);\n        break;\n    }\n  }\n});\n\nfield.addEventListener('touchstart', handleTouchStart, { passive: true });\nfield.addEventListener('touchmove', handleTouchMove, { passive: true });\nfield.addEventListener('touchend', handleTouchEnd, { passive: true });\n\nlet touchStartX, touchStartY, swipeDirection;\n\nfunction handleTouchStart(e) {\n  touchStartX = e.touches[0].clientX;\n  touchStartY = e.touches[0].clientY;\n}\n\nfunction handleTouchMove(e) {\n  const currentX = e.touches[0].clientX;\n  const currentY = e.touches[0].clientY;\n\n  const swipeX = currentX - touchStartX;\n  const swipeY = currentY - touchStartY;\n\n  if (Math.abs(swipeX) > Math.abs(swipeY)) {\n    swipeDirection = swipeX > 0 ? 'right' : 'left';\n  } else {\n    swipeDirection = swipeY > 0 ? 'down' : 'up';\n  }\n}\n\nfunction handleTouchEnd(e) {\n  if (game.status === 'playing') {\n    switch (swipeDirection) {\n      case 'left':\n        game.moveLeft();\n        move(game.state);\n        break;\n      case 'right':\n        game.moveRight();\n        move(game.state);\n        break;\n      case 'up':\n        game.moveUp();\n        move(game.state);\n        break;\n      case 'down':\n        game.moveDown();\n        move(game.state);\n        break;\n    }\n  }\n}\n","'use strict';\n\nclass Game {\n  static get STATUS() {\n    return {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n  }\n\n  static get INITIAL_STATE() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.status = Game.STATUS.idle;\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.moves = 0;\n\n    this.animation = {\n      newCell: [],\n    };\n  }\n\n  moveLeft() {\n    const newGrid = this.move('left');\n\n    if (newGrid) {\n      this.state = newGrid;\n\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newGrid)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveRight() {\n    const newGrid = this.move('right');\n\n    if (newGrid) {\n      this.state = newGrid;\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newGrid)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveUp() {\n    const columns = this.getGridData();\n    const newColumns = this.move('up', columns);\n\n    if (newColumns) {\n      this.state = this.getGridData(newColumns);\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newColumns)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveDown() {\n    const columns = this.getGridData();\n    const newColumns = this.move('down', columns);\n\n    if (newColumns) {\n      this.state = this.getGridData(newColumns);\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newColumns)) {\n        this.lose();\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS.playing;\n    this.getRandomCell();\n    this.getRandomCell();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = Game.STATUS.idle;\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n  }\n\n  // Add your own methods here\n  lose() {\n    this.status = Game.STATUS.lose;\n  }\n\n  win() {\n    this.status = Game.STATUS.win;\n  }\n\n  move(direction, grid = this.state) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const newGrid = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      let newRow = grid[i].filter((cell) => cell);\n\n      if (newRow.length > 1) {\n        newRow = this.mergeCells(newRow, direction);\n      }\n\n      while (newRow.length < 4) {\n        if (direction === 'left' || direction === 'up') {\n          newRow.push(0);\n        } else {\n          newRow.unshift(0);\n        }\n      }\n\n      newGrid.push(newRow);\n    }\n\n    return JSON.stringify(grid) !== JSON.stringify(newGrid) ? newGrid : false;\n  }\n\n  hasAvailableMoves(grid) {\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        if (grid[x][y] === 0) {\n          return true;\n        }\n\n        if (x < grid.length - 1 && grid[x][y] === grid[x + 1][y]) {\n          return true;\n        }\n\n        if (y < grid[x].length - 1 && grid[x][y] === grid[x][y + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getRandomCell() {\n    while (true) {\n      const totalCells = this.state.length * this.state[0].length;\n      const randomIndex = Math.floor(Math.random() * totalCells);\n      const x = Math.floor(randomIndex / this.state[0].length);\n      const y = randomIndex % this.state[0].length;\n      const value = Math.random() > 0.1 ? 2 : 4;\n\n      if (this.isEmpty(this.state[x][y])) {\n        this.state[x][y] = value;\n\n        return [x, y, value];\n      }\n    }\n  }\n\n  getGridData(grid = this.state) {\n    const data = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      data.push(grid.map((row) => row[i]));\n    }\n\n    return data;\n  }\n\n  isEmpty(cell) {\n    return cell === 0;\n  }\n\n  mergeCells(row, direction) {\n    let currentRow = row;\n    const newRow = [];\n    let i = 0;\n\n    if (direction === 'right' || direction === 'down') {\n      currentRow = [...currentRow].reverse();\n    }\n\n    while (i < currentRow.length) {\n      if (currentRow[i] !== 0 && currentRow[i] === currentRow[i + 1]) {\n        const sum = currentRow[i] * 2;\n\n        this.score += sum;\n\n        newRow.push(sum);\n\n        if (sum === 2048) {\n          this.win();\n        }\n        i += 2;\n      } else {\n        newRow.push(currentRow[i]);\n        i++;\n      }\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      return newRow.reverse();\n    }\n\n    return newRow;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$touchStartX","$09e991522ca7e64e$var$touchStartY","$09e991522ca7e64e$var$swipeDirection","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","INITIAL_STATE","constructor","initialState","status","state","map","row","slice","score","moves","animation","newCell","moveLeft","newGrid","move","getRandomCell","hasAvailableMoves","moveRight","moveUp","columns","getGridData","newColumns","moveDown","getScore","getState","getStatus","start","restart","direction","grid","i","length","newRow","filter","cell","mergeCells","push","unshift","JSON","stringify","x","y","randomIndex","Math","floor","random","value","isEmpty","data","currentRow","reverse","sum","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$field","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$fieldCells","rows","cells","$09e991522ca7e64e$var$move","$09e991522ca7e64e$var$updateCell","arr","add","classes","classList","index","findIndex","element","startsWith","remove","includes","every","e","textContent","addEventListener","target","$09e991522ca7e64e$var$emptyField","forEach","code","touches","clientX","clientY","passive","currentX","currentY","swipeX","swipeY","abs"],"version":3,"file":"index.23835c85.js.map"}